/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as faces from "../interfaces"





declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ProductsInputType: { // input type
    category?: string | null; // String
    colors?: Array<string | null> | null; // [String]
    excludeBySlug?: string | null; // ID
    limit?: number | null; // Int
    order?: string | null; // String
    priceFrom?: number | null; // Int
    priceTo?: number | null; // Int
    sortBy?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenRootTypes {
  Category: faces.ICategory;
  Product: faces.IProduct;
  ProductType: faces.IProductType;
  Query: {};
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  ProductsInputType: NexusGenInputs['ProductsInputType'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
}

export interface NexusGenFieldTypes {
  Category: { // field return type
    description: string | null; // String
    id: string | null; // ID
    name: string | null; // String
    products: Array<NexusGenRootTypes['Product'] | null> | null; // [Product]
    slug: string | null; // String
  }
  Product: { // field return type
    category: NexusGenRootTypes['Category'] | null; // Category
    description: string | null; // String
    id: string | null; // ID
    image: string | null; // String
    in_stock: number | null; // Int
    name: string | null; // String
    price: number | null; // Float
    productType: NexusGenRootTypes['ProductType'] | null; // ProductType
    rating: number | null; // Int
    slug: string | null; // ID
  }
  ProductType: { // field return type
    id: string | null; // ID
    name: string | null; // String
    products: Array<NexusGenRootTypes['Product'] | null> | null; // [Product]
    slug: string | null; // String
  }
  Query: { // field return type
    categories: Array<NexusGenRootTypes['Category'] | null> | null; // [Category]
    product: NexusGenRootTypes['Product'] | null; // Product
    products: Array<NexusGenRootTypes['Product'] | null> | null; // [Product]
    productTypes: Array<NexusGenRootTypes['ProductType'] | null> | null; // [ProductType]
  }
}

export interface NexusGenArgTypes {
  ProductType: {
    products: { // args
      excludeBySlug?: string | null; // ID
      limit?: number | null; // Int
    }
  }
  Query: {
    product: { // args
      slug?: string | null; // ID
    }
    products: { // args
      filters?: NexusGenInputs['ProductsInputType'] | null; // ProductsInputType
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Category" | "Product" | "ProductType" | "Query";

export type NexusGenInputNames = "ProductsInputType";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: {};
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}